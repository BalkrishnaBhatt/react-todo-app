{"version":3,"sources":["components/navbar/navbar.jsx","components/to-do-container/input/input.jsx","shared/add/add.jsx","components/to-do-container/header/header.jsx","shared/delete/delete.jsx","components/to-do-container/list/list.jsx","components/to-do-container/list-container/list-container.jsx","components/to-do-container/container.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalItems","className","href","Input","props","newItem","onHandleInput","id","type","onChange","placeholder","value","Add","onAddItem","onClick","Header","Delete","onDeleteItem","icon","List","item","onUpdateItem","e","key","target","ListContainer","list","listItems","map","TodoContainer","library","add","faTrash","App","state","filter","setState","preventDefault","addNotification","title","subtitle","message","theme","native","console","log","forEach","handleInput","Date","now","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.97a57193.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.scss\";\r\nconst NavBar = ({ totalItems }) => {\r\n  return (\r\n    <div className='navbarClass'>\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          To-Do List\r\n          <span className=\"badge badge-pill badge-secondary m-2\">\r\n            {totalItems}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n// can be used with a class\r\n// NavBar.propTypes = {\r\n//   totalItems: React.propTypes.number.isRequired,\r\n//   total: React.propTypes.number,\r\n// };\r\n// NavBar.defaultProps = {\r\n//   totalItems: 0,\r\n// };\r\n// NavBar.propTypes = {\r\n//   totalItems(props, propName, component) {\r\n//     if (!(propName in props)) {\r\n//       return new Error(`missing ${propName}`);\r\n//     }\r\n//     if (props[propName] < 0) {\r\n//       return new Error(`Negative ${propName}`);\r\n//     }\r\n//   },\r\n// };\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./input.scss\";\r\n\r\nconst Input = (props) => {\r\n  const { newItem, onHandleInput } = props;\r\n  return (\r\n    <div className=\"form\">\r\n      <header>\r\n        <form id=\"todo-form\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={onHandleInput}\r\n            placeholder=\"Type...\"\r\n            value={newItem.value}\r\n          ></input>\r\n        </form>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./add.scss\";\r\n\r\nconst Add = ({ onAddItem }) => {\r\n  return (\r\n    <div className=\"add-btn\">\r\n      <button onClick={onAddItem}>ADD</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","import React from \"react\";\r\nimport Input from \"../input/input\";\r\nimport Add from \"../../../shared/add/add\";\r\nimport \"./header.scss\";\r\n\r\nconst Header = (props) => {\r\n  const { newItem, onHandleInput, onAddItem } = props;\r\n  return (\r\n    <div className='listHeader'>\r\n      <Input\r\n        newItem={newItem}\r\n        onHandleInput={onHandleInput}\r\n        onAddItem={onAddItem}\r\n      ></Input>\r\n      <Add onAddItem={onAddItem}></Add>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Fragment } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./delete.scss\";\r\n\r\nconst Delete = ({ onDeleteItem }) => {\r\n  return (\r\n    <Fragment>\r\n      <span>\r\n        <FontAwesomeIcon\r\n          className=\"faicons\"\r\n          icon=\"trash\"\r\n          onClick={onDeleteItem}\r\n        ></FontAwesomeIcon>\r\n      </span>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","import React from \"react\";\r\nimport Delete from \"../../../shared/delete/delete\";\r\nimport \"./list.scss\";\r\n\r\nconst List = (props) => {\r\n  const { item, onDeleteItem, onUpdateItem } = props;\r\n  return (\r\n    <div className=\"list\">\r\n      <p>\r\n        <input\r\n          type=\"text\"\r\n          value={item.value}\r\n          onChange={(e) => onUpdateItem(item.key, e.target.value)}\r\n        ></input>\r\n        <Delete onDeleteItem={() => onDeleteItem(item.key)}></Delete>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./list-container.scss\";\r\nimport List from \"../list/list\";\r\n\r\nconst ListContainer = (props) => {\r\n  const { list, onUpdateItem, onDeleteItem } = props;\r\n  const listItems = list.map((item) => {\r\n    return (\r\n      <List\r\n        key={item.key}\r\n        item={item}\r\n        onUpdateItem={onUpdateItem}\r\n        onDeleteItem={onDeleteItem}\r\n      />\r\n    );\r\n  });\r\n  return <Fragment>{listItems}</Fragment>;\r\n};\r\n\r\nexport default ListContainer;\r\n","import React from \"react\";\r\nimport Header from \"./header/header\";\r\nimport ListContainer from \"./list-container/list-container\";\r\nimport \"./container.scss\";\r\n\r\nconst TodoContainer = (props) => {\r\n  const {\r\n    newItem,\r\n    list,\r\n    onHandleInput,\r\n    onDeleteItem,\r\n    onUpdateItem,\r\n    onAddItem,\r\n  } = props;\r\n  return (\r\n    <div className=\"containerr\">\r\n      <Header\r\n        newItem={newItem}\r\n        onHandleInput={onHandleInput}\r\n        onAddItem={onAddItem}\r\n      ></Header>\r\n      <ListContainer\r\n        onUpdateItem={onUpdateItem}\r\n        onDeleteItem={onDeleteItem}\r\n        list={list}\r\n      ></ListContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/navbar/navbar\";\r\nimport Container from \"./components/to-do-container/container\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport addNotification from 'react-push-notification';\r\n\r\nlibrary.add(faTrash);\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: [],\r\n      newItem: {\r\n        key: \"\",\r\n        value: \"\",\r\n      },\r\n    };\r\n  }\r\n  onDeleteItem = (key) => {\r\n    const list = this.state.list.filter((item) => item.key !== key);\r\n    this.setState({ list });\r\n  };\r\n  onAddItem = (e) => {\r\n    e.preventDefault();\r\n    const { newItem } = this.state;\r\n    if (newItem.value !== \"\") {\r\n      addNotification({\r\n        title: 'You have added new Item in your Todo list',\r\n        subtitle: 'This is a subtitle',\r\n        message: newItem.value,\r\n        theme: 'darkblue',\r\n        native: true // when using native, your OS will handle theming.\r\n    });\r\n      const list = [...this.state.list, newItem];\r\n      this.setState({ list, newItem: { key: \"\", value: \"\" } });\r\n    }\r\n  };\r\n  onUpdateItem = (key, value) => {\r\n    console.log(value, key);\r\n    const { list } = this.state;\r\n    list.forEach((item) => {\r\n      if (item.key === key) {\r\n        item.value = value;\r\n      }\r\n    });\r\n    this.setState({ list });\r\n  };\r\n  handleInput = (e) => {\r\n    const value = e.target.value;\r\n    const key = Date.now();\r\n    this.setState({ newItem: { value, key } });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar totalItems={this.state.list.length}></NavBar>\r\n        <Container\r\n          list={this.state.list}\r\n          newItem={this.state.newItem}\r\n          onUpdateItem={this.onUpdateItem}\r\n          onHandleInput={this.handleInput}\r\n          onDeleteItem={this.onDeleteItem}\r\n          onAddItem={this.onAddItem}\r\n        ></Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport './App.css'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}